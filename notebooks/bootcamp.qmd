#library(dplyr)
#library(Seurat)
#library(patchwork)



.libPaths(c('/usr/local/lib/R/site-library', '/usr/local/lib/R/library'))
library(future)
# check the current active plan
plan()

?future::plan

# change the current plan to access parallelization
plan("multisession", workers = 8)
plan()

#set.seed(61)
#options(future.globals.maxSize = 4000 * 1024^2)
#nb.start.time <- Sys.time()



#install.packages('remotes')
#remotes::install_github("mojaveazure/seurat-object", "develop", quiet = TRUE)
#remotes::install_github(repo = 'satijalab/seurat', ref = 'develop')
#remotes::install_github("satijalab/seurat", "seurat5", quiet = TRUE)
library(Seurat)
library(RColorBrewer)
library(patchwork)
library(ggplot2)
library(dplyr)
library(hdf5r)
library(stringr)
if (!require("BiocManager", quietly = TRUE))
  install.packages("BiocManager")
BiocManager::install("biomaRt")
library(biomaRt)
library(viridis)
library(Matrix)


pbmc.data <- Read10X(data.dir = "/oscar/data/shared/databases/dennery_scrna/AirD60out/filtered_feature_bc_matrix/")
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
#pbmc.data<- UpdateSeuratObject(pbmc.data) -> gives "We are unable to convert Seurat objects less than version 2.X to version 3.X"


#Importing data and interacting with Seurat objects
pbmc@assays
head(pbmc@meta.data)

#pbmc[["RNA"]] <- split(pbmc[["RNA"]], f = pbmc$orig.ident)
pbmc
#An object of class Seurat 
#18427 features across 4910 samples within 1 assay 
#Active assay: RNA (18427 features, 0 variable features)
#1 layer present: counts


#DataQC


{r "Figure out format of MT gene IDs"}
rownames(pbmc.data) %>% grep(pattern = '^mt-', ignore.case = TRUE, value = TRUE)
#[1] "mt-Rnr1" "mt-Rnr2"

#checking for duplicate rows
duplicate_rows <- any(duplicated(rownames(pbmc.data)))
print(duplicate_rows) 
#false

#looking through headers
head(rownames(pbmc.data))
head(colnames(pbmc.data))
any(duplicated(rownames(pbmc.data))
    
#making headers unique
rownames(pbmc.data) <- make.unique(rownames(pbmc.data))
sum(is.na(rownames(pbmc.data)))
sum(rownames(pbmc.data) == "")
colnames(pbmc.data) <- make.unique(colnames(pbmc.data))


#Ran PercentageFeatureSet on an object class gives error: no applicable method for 'DefaultAssay' applied to an object of class
#creating Assay object to circumvent sparse matrix
#https://github.com/satijalab/seurat/issues/8374

mat <- readMM("/oscar/data/shared/databases/dennery_scrna/AirD60out/filtered_feature_bc_matrix/matrix.mtx.gz")
mat <- Matrix::t(mat)
mat <- as(mat, "CsparseMatrix")

txs <- readLines("/oscar/data/shared/databases/dennery_scrna/AirD60out/filtered_feature_bc_matrix/features.tsv.gz")
barcodes <- readLines("/oscar/data/shared/databases/dennery_scrna/AirD60out/filtered_feature_bc_matrix/barcodes.tsv.gz")

colnames(mat) <- txs
rownames(mat) <- barcodes
rownames(mat) <- make.unique(rownames(mat))
pbmc.seurat.obj <- CreateSeuratObject(counts = mat, 
                                         assay = "RNA", 
                                         min.features = 200, 
                                         min.cells = 3)
DefaultAssay(pbmc.seurat.obj) <- "RNA"
pbmc.seurat.obj <- NormalizeData(
  pbmc.seurat.obj,
  normalization.method = "LogNormalize",
  scale.factor = 10000,
  margin = 1,
  verbose = TRUE,
)

{r "add mt percent data"}

pbmc.seurat.obj[["percent.mt"]] <- PercentageFeatureSet(pbmc.seurat.obj, pattern = "^MT-")
Idents(pbmc.seurat.obj) <- 'orig.ident'
levels(pbmc.seurat.obj) <- c("IMMUNE_CTRL", "IMMUNE_STIM")
#Error: NA's generated by missing levels


VlnPlot(pbmc.seurat.obj, features = "nFeature_RNA")
VlnPlot(pbmc.seurat.obj,, features = "nCount_RNA")
VlnPlot(pbmc.seurat.obj, features="percent.mt")
#All cells have the same value of percent.mt.

FeatureScatter(pbmc.seurat.obj, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")

FeatureScatter(pbmc.seurat.obj, feature1 = "nCount_RNA", feature2 = "percent.mt")

FeatureScatter(pbmc.seurat.obj, feature1 = "nFeature_RNA", feature2 = "percent.mt")


qc_data <- pbmc.seurat.obj@meta.data[c('orig.ident','nCount_RNA','nFeature_RNA','percent.mt')] %>% arrange(percent.mt)
ggplot(qc_data, aes(x = nCount_RNA, y = nFeature_RNA, color = percent.mt)) + 
  geom_point() + 
  scale_color_gradientn(colors = rev(brewer.pal(5, "Spectral")), limits = c(0,10), oob = (scales::squish)) +
  facet_wrap(~orig.ident) + 
  theme_bw()



#Data Filtering

pbmc.seurat.obj_sub <- subset(pbmc.seurat.obj, subset = nFeature_RNA > 500 & nFeature_RNA < 7000 & percent.mt < 5 & nCount_RNA > 1000)

pbmc.seurat.obj_sub<- subset(pbmc.seurat.obj_sub, cells = sample(x = rownames(pbmc.seurat.obj@assays$RNA@cells@.Data), size = 5000) )
table(pbmc.seurat.obj_sub@meta.data$orig.ident)
#1845


#Normalization
{r "SCTransform"}
start.time <- Sys.time()
pbmc.seurat.obj_sub <- SCTransform(pbmc.seurat.obj_sub, vars.to.regress = "percent.mt", verbose = FALSE, return.only.var.genes = FALSE)
end.time <- Sys.time()
end.time - start.time
#Time difference of 44.8173 secs

pbmc.seurat.obj_sub <- RunPCA(pbmc.seurat.obj_sub)
ElbowPlot(pbmc.seurat.obj_sub)




if (!"stim" %in% colnames(pbmc.seurat.obj_sub@meta.data)) {
  pbmc.seurat.obj_sub <- AddMetaData(object = pbmc.seurat.obj_sub, metadata = rep("stim1", ncol(pbmc.seurat.obj_sub)), col.name = "stim")
}

#pbmc.seurat.obj_sub <- RunUMAP(pbmc.seurat.obj_sub, dims = 1:30)
#DimPlot(pbmc.seurat.obj_sub, reduction = "umap")



pbmc.seurat.obj_sub <- RunUMAP(pbmc.seurat.obj_sub, dims = 1:10, reduction = "pca", reduction.name = "umap.unintegrated")
pbmc.seurat.obj_sub <- RunUMAP(pbmc.seurat.obj_sub, reduction = "integrated.rpca", dims = 1:10, reduction.name = "umap.rpca")

p1 <- DimPlot(
  pbmc.seurat.obj_sub,
  reduction = "umap.unintegrated",
  group.by = "cca_clusters",
  split.by = "stim",  
  combine = FALSE, label.size = 2
)
p1

#Integration


#CCA Integration
{r}
#pbmc.seurat.obj@active.assay = "RNA"
#pbmc.seurat.obj[["RNA"]] <- split(pbmc.seurat.obj[["RNA"]], f = pbmc.seurat.obj$stim)
#pbmc.seurat.obj <- IntegrateLayers(object = pbmc.seurat.obj, method = CCAIntegration, normalization.method = "SCT")
#(install.packages("reticulate")) 

pbmc.seurat.obj_sub <- IntegrateLayers(
  object = pbmc.seurat.obj_sub, method = CCAIntegration,
  orig.reduction = "pca", new.reduction = "integrated.cca", normalization.method = "SCT",
  verbose = FALSE
)

#Error in UseMethod(generic = "Assays", object = object) : 
#no applicable method for 'Assays' applied to an object of class "NULL"


#RPCA Integration

pbmc.seurat.obj_sub <- IntegrateLayers(
  object = pbmc.seurat.obj_sub, method = RPCAIntegration,
  orig.reduction = "pca", new.reduction = "integrated.rpca", normalization.method = "SCT",
  verbose = FALSE
)


pbmc.seurat.obj_sub <- FindNeighbors(pbmc.seurat.obj_sub, reduction = "integrated.cca", dims = 1:10) 
pbmc.seurat.obj_sub <- FindClusters(pbmc.seurat.obj_sub, resolution = .8, cluster.name = "cca_clusters")


